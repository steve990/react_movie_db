{"version":3,"sources":["About.js","Header.js","Movies.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","href","React","Component","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleContentChange","controlType","event","preventDefault","searchMe","_this2","className","htmlFor","type","id","name","value","selectedGenre","onChange","genres","map","item","key","selectedPage","totalPages","startDate","min","max","endDate","searching","react_router_dom","to","onClick","Movies","movies","src","concat","poster_path","alt","title","overview","API_KEY","BASE_URL","GENRES","App","state","apiKey","dayRange","getMovies","bind","assertThisInitialized","getGenres","checkDates","Promise","resolve","reject","setState","target","then","datePosition","dateRange","arguments","length","undefined","passedValue","tempDate","Date","setDate","getDate","getFullYear","Number","getMonth","slice","_this3","url","fetch","response","json","data","results","total_pages","catch","error","alert","_this4","_this5","react_router","path","render","src_Header","assign","component","exact","src_Movies","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1c09739.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>About</h1>\r\n                <p>This project was created by Steve Gilkes using <strong><a href='https://www.themoviedb.org'>The Movie DB</a></strong>.\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.props.handleContentChange();  \r\n    }\r\n\r\n    handleContentChange(controlType, event){\r\n        event.preventDefault();\r\n        this.props.handleContentChange(controlType, event);\r\n    }\r\n\r\n    searchMe(){\r\n        this.props.searchMe();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"controls\">\r\n                <label htmlFor=\"genre\">Genre:&nbsp;</label>\r\n                <select \r\n                    type=\"text\" \r\n                    id=\"genre\" \r\n                    name=\"genre\"\r\n                    value={this.props.selectedGenre} \r\n                    onChange={(event) => this.handleContentChange('genre', event)}\r\n                >\r\n                    {this.props.genres.map((item)=>(\r\n                    <option key={item.id} value={item.id}>{item.name}</option>\r\n                    ))}\r\n                </select>\r\n\r\n                <span>\r\n                    <label htmlFor=\"page\">&nbsp;Page:&nbsp;</label>\r\n                    <input \r\n                        type=\"number\" \r\n                        id=\"page\" \r\n                        name=\"page\"\r\n                        value={this.props.selectedPage}\r\n                        onChange={(event) => this.handleContentChange('page', event)}/>\r\n                    <label htmlFor=\"page\">&nbsp;of {this.props.totalPages}</label>\r\n                </span>\r\n                \r\n                <br />\r\n                <label htmlFor=\"startdate\">Start date:&nbsp;</label>\r\n                <input \r\n                    type=\"date\" \r\n                    id=\"startdate\" \r\n                    name=\"startdate\"\r\n                    value={this.props.startDate} \r\n                    onChange={(event) => this.handleContentChange('startDate', event)}\r\n                    min=\"1900-01-01\" \r\n                    max=\"2030-12-31\"/>\r\n\r\n                <label htmlFor=\"enddate\">&nbsp;End date:&nbsp;</label>\r\n                <input \r\n                    type=\"date\" \r\n                    id=\"enddate\" \r\n                    name=\"enddate\"\r\n                    value={this.props.endDate}\r\n                    onChange={(event) => this.handleContentChange('endDate', event)}\r\n                    min=\"1900-01-01\" \r\n                    max=\"2030-12-31\"/>\r\n\r\n                {this.props.searching ? \r\n                    <Link to='/about/' onClick={() => this.searchMe()}>About</Link> \r\n                    : \r\n                    <Link to='/' onClick={() => this.searchMe()}>Back to Movies</Link>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Movies extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='movieContainer'>\r\n                {this.props.movies.map((item)=>(\r\n                <article key={item.id}>\r\n                    <img \r\n                    src={`http://image.tmdb.org/t/p/w185/${item.poster_path}`}\r\n                    alt={`Movie poster for ${item.title}`}\r\n                    ></img>\r\n                    <h2>{item.title}</h2>\r\n                    <h3>Overview</h3>\r\n                    <p>{item.overview === '' ? 'No overview has been submitted for this movie.' : item.overview} </p>\r\n                    <br />\r\n                </article>\r\n                ))}       \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Movies;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport About from './About';\nimport Header from './Header';\nimport Movies from './Movies';\n\nconst API_KEY   = '387edbffe136b089267267b98a26451d';\nconst BASE_URL  = 'http://api.themoviedb.org/3/discover/movie?api_key='\n    + API_KEY;\n\nconst GENRES = 'https://api.themoviedb.org/3/genre/movie/list?api_key='\n            + API_KEY\n            + '&language=en-US';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state  = {\n          apiKey : API_KEY,\n          startDate  : '',\n          endDate    : '',\n          movies : [],\n          genres : [],\n          totalPages : 1,\n          dayRange : 60,\n          selectedGenre  : 0,\n          selectedPage   : 1,\n          searching : true\n        };\n\n        this.getMovies            = this.getMovies.bind(this);\n        this.searchMe             = this.searchMe.bind(this);\n        this.handleContentChange  = this.handleContentChange.bind(this);\n    }\n\n    // Called when constructor is finished building component.\n    componentDidMount(){\n      this.getGenres();\n      this.getMovies();\n      this.checkDates('startDate', this.state.dayRange);\n      this.checkDates('endDate');\n    }\n\n    handleContentChange(controlType, event){\n      let statePromise = new Promise((resolve, reject) => {\n        if (controlType === 'genre'){\n          this.setState({\n            selectedPage: 1,\n            selectedGenre: event.target.value\n        });\n        } else if (controlType === 'page'){\n          if (event.target.value < 1){\n            event.target.value = 1;\n            // this.setState({ selectedPage: 1 });\n          } else if (event.target.value > this.state.totalPages) {\n            event.target.value = this.state.totalPages;\n          }\n          this.setState({ selectedPage: event.target.value });\n        } else if (controlType === 'startDate'){\n          this.checkDates('startDate', this.state.dayRange, event.target.value);\n        } else if (controlType === 'endDate'){\n          this.checkDates('endDate', 0, event.target.value);\n        }\n        resolve();\n      });\n      statePromise.then(() => this.getMovies());\n    }\n\n    checkDates(datePosition, dateRange = 0, passedValue = null) {\n      let tempDate = new Date();\n\n      tempDate.setDate(tempDate.getDate() - dateRange);\n\n      if (passedValue === null){\n        tempDate =  tempDate.getFullYear() + '-' +\n                    (\"0\" + (Number(tempDate.getMonth()) + 1)).slice(-2) + '-' +\n                    (\"0\" + tempDate.getDate()).slice(-2);\n      } else {\n        tempDate = passedValue;\n      }\n\n      if (datePosition === 'startDate'){\n        this.setState({startDate : tempDate });\n      } else {\n        this.setState({endDate : tempDate });\n      }\n      this.getMovies();\n    }\n\n    getMovies() {    \n      let url = '';\n\n      url = BASE_URL + \n        '&primary_release_date.gte=' + this.state.startDate +\n        '&primary_release_date.lte=' + this.state.endDate;\n        \n      url += \"&page=\" + this.state.selectedPage;\n      if (this.state.selectedGenre === 0){\n        url += \"&with_genres=28\";\n      } else {\n\n        url += \"&with_genres=\" + this.state.selectedGenre;\n      }\n\n      // Request and wait for data from remote server.\n      fetch(url).then(response => response.json())\n        .then((data) => {\n            this.setState(\n              {movies: data.results,\n              totalPages: data.total_pages}\n            );\n        })\n        // Data is not retieved.\n        .catch((error) => {\n            alert(error);\n        });\n    }\n\n    getGenres() {\n      // This code gets data from the remote server.\n      fetch(GENRES).then(response => response.json())\n\n      // Data is retrieved.\n      .then((data) => {\n          this.setState({genres:data.genres});\n      })\n      // Data is not retrieved.\n      .catch((error) => {\n          alert(error);\n      });\n    }\n\n    searchMe(){\n      if (this.state.searching){\n        this.setState({searching: false});\n      } else {\n        this.setState({searching: true});\n      }\n    }\n\n    render() {\n        return (  \n          <Router>  \n            <div>\n              <Route \n                path='/'\n                render={(props) => <Header {...props} \n                  selectedGenre={this.state.selectedGenre}\n                  selectedPage={this.state.selectedPage}\n                  startDate={this.state.startDate}\n                  endDate={this.state.endDate}\n                  genres={this.state.genres} \n                  totalPages={this.state.totalPages} \n                  searching={this.state.searching} \n                  handleContentChange={this.handleContentChange}\n                  searchMe={this.searchMe}\n                  />} />\n              <Route \n                path='/about/' \n                component={About} />\n              <Route \n                exact path='/' \n                render={(props) => <Movies {...props} movies={this.state.movies} />}\n                />\n            </div> \n          </Router> \n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}